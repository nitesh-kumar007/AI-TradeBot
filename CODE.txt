<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Trading Bot</title>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
      }
      .container {
        padding: 20px;
      }
      h1,
      h2 {
        text-align: center;
      }
      #priceDisplay,
      #botStatus,
      #tradeHistory {
        margin: 20px auto;
        padding: 10px;
        background: white;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      button {
        display: inline-block;
        margin: 10px;
        padding: 10px 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      button:hover {
        background: #0056b3;
      }
      #initialSetup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      #initialSetup input {
        margin: 10px 0;
        padding: 10px;
        font-size: 16px;
        width: 200px;
        border: 1px solid #ccc;
        border-radius: 5px;
      }
    </style>
  </head>
  <body>
    <!-- Initialization Modal -->
    <div id="initialSetup">
      <h2 style="color: white">Initialize Trading Bot</h2>
      <label style="color: white" for="initialBalanceInput"
        >Initial Balance ($):</label
      >
      <input type="number" id="initialBalanceInput" value="1000" min="1" />
      <br />
      <label style="color: white" for="tradeAmountInput"
        >Trade Amount ($):</label
      >
      <input type="number" id="tradeAmountInput" value="100" min="1" />
      <br />
      <button id="initializeBotBtn">Initialize Bot</button>
    </div>

    <div class="container">
      <h1>Trading Bot Dashboard</h1>
      <div id="priceDisplay">
        <h2>Price Updates</h2>
        <p><strong>Currency:</strong> <span id="currency">Bitcoin</span></p>
        <p><strong>Price:</strong> $<span id="price">50000</span></p>
        <p><strong>Time:</strong> <span id="time">--:--:--</span></p>
      </div>
      <div id="botStatus">
        <h2>Bot Status</h2>
        <p><strong>Status:</strong> <span id="status">Inactive</span></p>
        <p><strong>Balance:</strong> $<span id="balance">0.00</span></p>
      </div>
      <div id="tradeHistory">
        <h2>Trade History</h2>
        <table border="1" width="100%" style="border-collapse: collapse">
          <thead>
            <tr>
              <th>Action</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>Profit/Loss</th>
            </tr>
          </thead>
          <tbody id="historyTable">
            <tr>
              <td colspan="4" style="text-align: center">No trades yet.</td>
            </tr>
          </tbody>
        </table>
      </div>
      <button id="startBotBtn">Start Bot</button>
      <button id="stopBotBtn">Stop Bot</button>
    </div>

    <script>
      const socket = io.connect();

      // Initialization
      document
        .getElementById("initializeBotBtn")
        .addEventListener("click", () => {
          const initialBalance = parseFloat(
            document.getElementById("initialBalanceInput").value
          );
          const tradeAmount = parseFloat(
            document.getElementById("tradeAmountInput").value
          );

          if (initialBalance > 0 && tradeAmount > 0) {
            socket.emit("initialize_bot", {
              initial_balance: initialBalance,
              trade_amount: tradeAmount,
            });
            document.getElementById("initialSetup").style.display = "none";
          } else {
            alert("Please enter valid amounts!");
          }
        });

      socket.on("bot_initialized", (data) => {
        console.log(
          `Initialized with: $${data.initial_balance} balance and $${data.trade_amount} trade amount.`
        );
        document.getElementById("balance").textContent =
          data.initial_balance.toFixed(2);
      });

      // Start bot
      document.getElementById("startBotBtn").addEventListener("click", () => {
        socket.emit("start_bot");
      });

      // Stop bot
      document.getElementById("stopBotBtn").addEventListener("click", () => {
        socket.emit("stop_bot");
      });

      // Update bot status
      socket.on("bot_status", (data) => {
        document.getElementById("status").textContent =
          data.status.charAt(0).toUpperCase() + data.status.slice(1);
      });

      // Update price
      socket.on("price_update", (data) => {
        document.getElementById("price").textContent = data.price.toFixed(2);
        document.getElementById("time").textContent = data.time;
        document.getElementById("currency").textContent =
          data.currency.charAt(0).toUpperCase() + data.currency.slice(1);
      });

      // Update trade history
      socket.on("trade_update", (data) => {
        const historyTable = document.getElementById("historyTable");
        const newRow = document.createElement("tr");

        newRow.innerHTML = `
        <td>${data.action.charAt(0).toUpperCase() + data.action.slice(1)}</td>
        <td>$${data.price.toFixed(2)}</td>
        <td>${data.action === "buy" ? (data.qty || 0).toFixed(6) : "-"}</td>
        <td>${
          data.action === "sell" ? `$${data.profitLoss.toFixed(2)}` : "-"
        }</td>
      `;

        historyTable.appendChild(newRow);

        // Update balance
        document.getElementById("balance").textContent =
          data.balance.toFixed(2);
      });

      // Display trade summary
      socket.on("trade_summary", (data) => {
        alert(`Total Profit/Loss: $${data.total_profit_loss.toFixed(2)}`);
      });
    </script>
  </body>
</html>




// wo code jo abhi replace kiya tha maine
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Advanced Trading Bot</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <style>
      body {
        background: linear-gradient(to right, #00438fac, #000000);
        font-family: "Arial", sans-serif;
        color: white;
        overflow-x: hidden;
        text-align: center;
        padding: 20px;
      }

      .chart-container {
        width: 80%;
        max-width: 900px;
        margin: 20px auto;
        padding: 10px;
        background: rgba(1, 154, 255, 0.9);
        border-radius: 10px;
      }

      canvas {
        width: 100%;
        height: 300px;
      }

      input[type="number"],
      select,
      button {
        margin: 10px;
        padding: 10px;
        border-radius: 5px;
        border: none;
        font-size: 14px;
      }

      button {
        background-color: #28a745;
        color: white;
        cursor: pointer;
      }

      button:hover {
        background-color: #218838;
      }

      .status {
        font-size: 18px;
        margin-top: 20px;
        padding: 10px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 5px;
      }

      .trade-history {
        margin-top: 30px;
        padding: 10px;
        background: rgba(0, 0, 0, 0.4);
        border-radius: 10px;
        max-width: 700px;
        margin: auto;
      }
    </style>
  </head>
  <body>
    <h1>Advanced Trading Bot</h1>

    <!-- User Inputs -->
    <label for="userBalance">Enter Starting Balance ($):</label>
    <input type="number" id="userBalance" value="1000" />

    <label for="currencySelect">Select Currency Pair:</label>
    <select id="currencySelect">
      <option value="bitcoin">Bitcoin (BTC/USD)</option>
      <option value="ethereum">Ethereum (ETH/USD)</option>
    </select>

    <label for="tradeAmount">Amount to Trade ($):</label>
    <input type="number" id="tradeAmount" value="100" min="1" />

    <!-- Buttons -->
    <button id="startBotBtn">Start Trading Bot</button>
    <button id="stopBotBtn" style="display: none">Stop Trading Bot</button>

    <!-- Chart Section -->
    <div class="chart-container">
      <canvas id="priceChart"></canvas>
    </div>

    <!-- Trading Status -->
    <div class="status" id="botStatus">Bot Status: Inactive</div>

    <!-- Trade History Section -->
    <div class="trade-history" id="tradeHistory">
      <h3>Trade History</h3>
      <div id="historyContent"></div>
    </div>

    <script>
      const socket = io.connect();
      const ctx = document.getElementById("priceChart").getContext("2d");

      // Chart.js Configuration
      const priceChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: [],
          datasets: [
            {
              label: "Price",
              data: [],
              borderColor: "rgba(255, 165, 0, 1)",
              backgroundColor: "rgba(255, 165, 0, 0.2)",
              borderWidth: 2,
              fill: "origin",
              tension: 0.4,
            },
            {
              type: "scatter",
              label: "Trades",
              data: [],
              pointStyle: "triangle",
              pointRadius: 8,
              showLine: false,
              backgroundColor: (ctx) => {
                const trade = ctx.raw;
                return trade?.action === "buy" ? "limegreen" : "red";
              },
              borderColor: "rgba(255, 255, 255, 0.8)",
              borderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          plugins: {
            tooltip: {
              callbacks: {
                label: (context) => {
                  if (context.datasetIndex === 1) {
                    const trade = context.raw;
                    return `${trade.action.toUpperCase()} - Price: $${trade.y.toFixed(
                      2
                    )}, Amount: $${trade.tradeAmount.toFixed(2)}`;
                  }
                  return `Price: $${context.raw.toFixed(2)}`;
                },
              },
            },
          },
          scales: {
            x: { ticks: { color: "white" } },
            y: { ticks: { color: "white" } },
          },
        },
      });

      // Currency Selection Change
      document
        .getElementById("currencySelect")
        .addEventListener("change", function () {
          socket.emit("change_currency", { currency: this.value });
          priceChart.data.labels = [];
          priceChart.data.datasets[0].data = [];
          priceChart.data.datasets[1].data = [];
          priceChart.update();
        });

      // Socket Listeners
      socket.on("price_update", ({ time, price }) => {
        priceChart.data.labels.push(time);
        priceChart.data.datasets[0].data.push(price);
        priceChart.update();
      });

      socket.on("trade_update", ({ action, price, tradeAmount, time }) => {
        priceChart.data.datasets[1].data.push({
          x: time,
          y: price,
          action,
          tradeAmount,
        });
        priceChart.update();

        const tradeEntry = document.createElement("div");
        tradeEntry.textContent = `${action.toUpperCase()} @ $${price.toFixed(
          2
        )} | Amount: $${tradeAmount.toFixed(2)} | Time: ${time}`;
        document.getElementById("historyContent").prepend(tradeEntry);
      });

      socket.on("bot_status", ({ status }) => {
        document.getElementById("botStatus").textContent = `Bot Status: ${
          status.charAt(0).toUpperCase() + status.slice(1)
        }`;
        document.getElementById("botStatus").style.color =
          status === "active" ? "limegreen" : "red";
      });

      socket.on("trade_summary", ({ total_profit_loss }) => {
        const summary = document.createElement("div");
        summary.textContent = `Total Profit/Loss: $${total_profit_loss.toFixed(
          2
        )}`;
        summary.style.color = total_profit_loss >= 0 ? "limegreen" : "red";
        summary.style.marginTop = "20px";
        document.getElementById("tradeHistory").appendChild(summary);
      });

      socket.on("clear_chart", () => {
        priceChart.data.labels = [];
        priceChart.data.datasets[0].data = [];
        priceChart.update();
      });

      // Button Handlers
      document.getElementById("startBotBtn").addEventListener("click", () => {
        const amount = document.getElementById("tradeAmount").value;
        socket.emit("start_bot", { amount });
        document.getElementById("startBotBtn").style.display = "none";
        document.getElementById("stopBotBtn").style.display = "inline-block";
      });

      document.getElementById("stopBotBtn").addEventListener("click", () => {
        socket.emit("stop_bot");
        document.getElementById("stopBotBtn").style.display = "none";
        document.getElementById("startBotBtn").style.display = "inline-block";
      });
    </script>
  </body>
</html>




import time
import random
import requests
import threading
from flask import Flask, render_template
from flask_socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

# Globals
bot_running = False
trade_history = []
available_balance = 1000.0
last_price = 50000.0  # Default price
current_currency = "bitcoin"  # Default currency
simulation_thread = None
stop_price_simulation = threading.Event()  # Event to signal stopping
thread_lock = threading.Lock()  # Lock for thread safety

price_data = []  # Store price data for moving average calculation
short_window = 5  # Short-term moving average window
long_window = 15  # Long-term moving average window

# Fetch live price from API
def fetch_live_price(pair):
    try:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={pair}&vs_currencies=usd"
        response = requests.get(url, headers={"Cache-Control": "no-cache"})
        response.raise_for_status()
        return response.json().get(pair, {}).get("usd", 0)
    except requests.exceptions.RequestException as e:
        print(f"API Error: {e}")
        return None

# Simulate price changes
def simulate_price():
    global last_price, current_currency, price_data

    print(f"Started price simulation for {current_currency}")
    while not stop_price_simulation.is_set():
        live_price = fetch_live_price(current_currency)
        if live_price:
            last_price = live_price
        else:
            fluctuation = random.uniform(-0.5, 0.5)
            last_price *= 1 + (fluctuation / 100)

        # Append price to the data list
        price_data.append(last_price)
        if len(price_data) > long_window:
            price_data.pop(0)  # Keep only the required window size

        current_time = time.strftime("%H:%M:%S")
        socketio.emit("price_update", {
            "price": round(last_price, 2),
            "time": current_time,
            "currency": current_currency
        })

        if stop_price_simulation.wait(2):
            break

    print(f"Stopped price simulation for {current_currency}")

# Calculate moving average
def calculate_moving_average(data, window):
    if len(data) < window:
        return None
    return sum(data[-window:]) / window

# Moving average crossover strategy
def moving_average_crossover_strategy():
    short_ma = calculate_moving_average(price_data, short_window)
    long_ma = calculate_moving_average(price_data, long_window)

    if short_ma and long_ma:
        if short_ma > long_ma:
            return "buy"
        elif short_ma < long_ma:
            return "sell"
    return "hold"

# Trading bot logic with 2-minute window
def trading_bot(trade_amount, pair):
    global bot_running, available_balance
    start_time = time.time()  # Record start time

    while bot_running:
        elapsed_time = time.time() - start_time
        if elapsed_time > 120:  # Stop after 2 minutes
            print("Trading session completed.")
            socketio.emit("bot_status", {"status": "completed"})
            break

        time.sleep(5)  # Adjust trading interval as needed

        action = moving_average_crossover_strategy()
        entry_price = fetch_live_price(pair)
        if not entry_price:
            continue

        if action == "buy" and available_balance >= trade_amount:
            qty = trade_amount / entry_price
            trade_history.append({"action": "buy", "price": entry_price, "qty": qty})
            available_balance -= trade_amount
            print(f"Bought {qty:.6f} at ${entry_price:.2f}")

        elif action == "sell" and trade_history:
            last_trade = trade_history[-1]
            if last_trade["action"] == "buy":
                qty = last_trade["qty"]
                sold_price = qty * entry_price
                profit_loss = sold_price - trade_amount
                available_balance += sold_price
                trade_history.append({"action": "sell", "price": entry_price, "profitLoss": profit_loss})
                print(f"Sold {qty:.6f} at ${entry_price:.2f}, Profit/Loss: ${profit_loss:.2f}")

        socketio.emit("trade_update", {
            "action": action,
            "balance": available_balance,
            "price": entry_price,
            "profitLoss": profit_loss if action == "sell" else 0
        })

    # Send trade summary after the session
    total_profit_loss = sum(
        trade.get("profitLoss", 0) for trade in trade_history if trade["action"] == "sell"
    )
    socketio.emit("trade_summary", {"total_profit_loss": total_profit_loss})


# Restart price simulation thread
def restart_price_simulation():
    global simulation_thread

    with thread_lock:
        stop_price_simulation.set()
        if simulation_thread and simulation_thread.is_alive():
            simulation_thread.join()

        stop_price_simulation.clear()
        simulation_thread = threading.Thread(target=simulate_price, daemon=True)
        simulation_thread.start()

@app.route("/")
def index():
    return render_template("index.html")

@socketio.on("change_currency")
def change_currency(data):
    global current_currency
    pair = data.get("currency", "bitcoin")
    if pair != current_currency:
        current_currency = pair
        print(f"Currency changed to: {current_currency}")
        restart_price_simulation()
        socketio.emit("clear_chart")

@socketio.on("start_bot")
def start_bot(data):
    global bot_running
    bot_running = True
    trade_amount = float(data.get("amount", 100))
    currency_pair = data.get("currency", current_currency)  # Use provided currency or fallback
    socketio.emit("bot_status", {"status": "active"})
    threading.Thread(target=trading_bot, args=(trade_amount, currency_pair), daemon=True).start()

@socketio.on("stop_bot")
def stop_bot():
    global bot_running
    bot_running = False

    # Calculate total profit/loss from trade history
    total_profit_loss = sum(
        trade.get("profitLoss", 0) for trade in trade_history if trade["action"] == "sell"
    )
    socketio.emit("bot_status", {"status": "inactive"})
    socketio.emit("trade_summary", {"total_profit_loss": total_profit_loss})


if __name__ == "__main__":
    restart_price_simulation()
    socketio.run(app, debug=True)
