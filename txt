<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Advanced Trading Bot</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <style>
      body {
        background: linear-gradient(to right, #00438fac, #000000);
        font-family: "Arial", sans-serif;
        color: white;
        overflow-x: hidden;
        text-align: center;
        padding: 20px;
      }

      .chart-container {
        width: 80%;
        max-width: 900px;
        margin: 20px auto;
        padding: 10px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
      }

      canvas {
        width: 100%;
        height: 300px;
      }

      input[type="number"],
      select,
      button {
        margin: 10px;
        padding: 10px;
        border-radius: 5px;
        border: none;
        font-size: 14px;
      }

      button {
        background-color: #28a745;
        color: white;
        cursor: pointer;
      }

      button:hover {
        background-color: #218838;
      }

      .status {
        font-size: 18px;
        margin-top: 20px;
        padding: 10px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 5px;
      }

      .trade-history {
        margin-top: 30px;
        padding: 10px;
        background: rgba(0, 0, 0, 0.4);
        border-radius: 10px;
        max-width: 700px;
        margin: auto;
      }

      .slider {
        display: none; /* Initially hidden */
        width: 80%;
        margin: 20px auto;
      }
    </style>
  </head>
  <body>
    <h1>Advanced Trading Bot</h1>

    <!-- User Balance Input -->
    <label for="userBalance">Enter Starting Balance ($):</label>
    <input type="number" id="userBalance" value="1000" />

    <!-- Currency Pair Selection -->
    <label for="currencySelect">Select Currency Pair:</label>
    <select id="currencySelect">
      <option value="bitcoin">Bitcoin (BTC/USD)</option>
      <option value="ethereum">Ethereum (ETH/USD)</option>
    </select>

    <!-- Amount to Trade -->
    <label for="tradeAmount">Amount to Trade ($):</label>
    <input type="number" id="tradeAmount" value="100" min="1" />

    <!-- Buttons -->
    <button id="startBotBtn">Start Trading Bot</button>
    <button id="stopBotBtn" style="display: none">Stop Trading Bot</button>

    <!-- Chart Canvas -->
    <div class="chart-container">
      <canvas id="priceChart"></canvas>
    </div>

    <!-- Trading Status -->
    <div class="status" id="botStatus">Bot Status: Inactive</div>

    <!-- Trade History -->
    <div class="trade-history" id="tradeHistory">
      <h3>Trade History</h3>
      <div id="historyContent"></div>
    </div>

    <!-- Slider -->
    <div class="slider">
      <label for="timeSlider">Select Time Range (in seconds):</label>
      <input type="range" id="timeSlider" min="10" max="100" value="50" />
      <span id="sliderValue">50 seconds</span>
    </div>

    <script>
      const socket = io.connect();
      let totalProfitLoss = 0;

      const ctx = document.getElementById("priceChart").getContext("2d");
      const priceChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: [],
          datasets: [
            {
              label: "Price",
              data: [],
              borderColor: "rgba(75, 192, 192, 1)",
              backgroundColor: "rgba(75, 192, 192, 0.5)",
              borderWidth: 2,
            },
          ],
        },

        options: {
          responsive: true,
          scales: {
            x: { title: { display: true, text: "Time" } },
            y: { title: { display: true, text: "Price" } },
          },
        },
      });

      // Listen for changes in currency selection
      document
        .getElementById("currencySelect")
        .addEventListener("change", function () {
          const selectedCurrency = this.value;
          socket.emit("change_currency", { currency: selectedCurrency });

          // Clear the chart data and reset labels when currency changes
          priceChart.data.labels = [];
          priceChart.data.datasets[0].data = [];
          priceChart.update();
        });

      // Slider visibility after 50 seconds
      setTimeout(() => {
        document.querySelector(".slider").style.display = "block";
      }, 10000);

      // Listen for price updates
      socket.on("price_update", function (data) {
        const { time, price } = data;
        priceChart.data.labels.push(time);
        priceChart.data.datasets[0].data.push(price);
        priceChart.update();
      });

      // Start/Stop trading bot
      document.getElementById("startBotBtn").addEventListener("click", () => {
        const amount = document.getElementById("tradeAmount").value;
        socket.emit("start_bot", { amount });
        document.getElementById("startBotBtn").style.display = "none";
        document.getElementById("stopBotBtn").style.display = "inline-block";
      });

      document.getElementById("stopBotBtn").addEventListener("click", () => {
        socket.emit("stop_bot");
        document.getElementById("stopBotBtn").style.display = "none";
        document.getElementById("startBotBtn").style.display = "inline-block";
      });

      // Listen for trade history updates
      socket.on("trade_update", function (data) {
        const { purchasedPrice, soldPrice, profitLoss } = data;
        totalProfitLoss += profitLoss;
        const historyContent = `
        <div>
          Purchased: $${purchasedPrice} | Sold: $${soldPrice} | Profit/Loss: $${profitLoss.toFixed(
          2
        )}
        </div>
      `;
        document.getElementById("historyContent").innerHTML = historyContent;
      });
    </script>
  </body>
</html>

import time import random import requests import threading from flask import
Flask, render_template from flask_socketio import SocketIO app = Flask(__name__)
socketio = SocketIO(app) bot_running = False trade_history = []
available_balance = 1000 # Initialize the last price with a realistic value
last_price = 50000.0 # Default for Bitcoin # Function to fetch live price with
retry logic def fetch_live_price(pair): try: url =
f"https://api.coingecko.com/api/v3/simple/price?ids={pair}&vs_currencies=usd"
response = requests.get(url, headers={"Cache-Control": "no-cache"})
response.raise_for_status() data = response.json() price = data.get(pair,
{}).get("usd", 0) print(f"Fetched price for {pair}: {price}") return price
except requests.exceptions.RequestException as e: print(f"API Error: {e}")
return None # Simulate dynamic price updates def simulate_price(pair): global
last_price while True: try: # Attempt to fetch live price live_price =
fetch_live_price(pair) if live_price is not None and live_price > 0: last_price
= live_price else: # Simulate fluctuations if live price fails fluctuation =
random.uniform(-0.5, 0.5) # Up/down by 0.5% last_price *= 1 + (fluctuation /
100) current_time = time.strftime("%H:%M:%S") socketio.emit("price_update",
{"price": round(last_price, 2), "time": current_time}) print(f"Updated price:
{round(last_price, 2)} at {current_time}") except Exception as e: print(f"Error
in simulate_price: {e}") time.sleep(3) # Update every 3 seconds # Trading bot
logic def trading_bot(trade_amount, pair, single_trade=False): global
available_balance, bot_running while bot_running: entry_price =
fetch_live_price(pair) if entry_price is None or entry_price <= 0:
print("Invalid entry price. Skipping trade.") time.sleep(5) continue qty =
trade_amount / entry_price sold_price = entry_price * 1.02 # Simulate 2% profit
profit_loss = (sold_price - entry_price) * qty available_balance += profit_loss
trade_history.append( {"purchasedPrice": entry_price, "soldPrice": sold_price,
"profitLoss": profit_loss} ) socketio.emit( "trade_update", {"purchasedPrice":
entry_price, "soldPrice": sold_price, "profitLoss": profit_loss}, ) if
single_trade: bot_running = False break time.sleep(5) @app.route("/") def
index(): return render_template("index.html") @socketio.on("start_bot") def
start_bot(data): global bot_running, available_balance bot_running = True
trade_amount = data.get("amount", 100) currency_pair = data.get("currency",
"bitcoin") threading.Thread( target=trading_bot, args=(trade_amount,
currency_pair, data.get("single_trade", False)) ).start()
@socketio.on("stop_bot") def stop_bot(): global bot_running bot_running = False
final_profit_loss = sum(trade["profitLoss"] for trade in trade_history)
socketio.emit("bot_stopped", final_profit_loss) if __name__ == "__main__":
threading.Thread(target=simulate_price, args=("bitcoin",)).start()
socketio.run(app, debug=True)
